from datetime import datetime
from typing import Dict, Any

def format_message(message: str, incident_data: Dict[str, Any]) -> str:
    """
    Format the generated message with appropriate styling and metadata.
    
    Args:
        message: The raw message text generated by the AI
        incident_data: The incident data used to generate the message
        
    Returns:
        Formatted message with appropriate styling and metadata
    """
    # Get the current timestamp
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
    
    # Extract severity and message type
    severity = incident_data.get("severity", "").split(" - ")[0]  # Get just the code (P0, P1, etc.)
    message_type = incident_data.get("message_type", "")
    
    # Determine the status badge color based on severity
    badge_color = get_severity_color(severity)
    
    # Format the impacted services
    impacted_services = incident_data.get("impacted_services", [])
    service_list = ""
    if impacted_services:
        service_list = "<ul>"
        for service in impacted_services:
            service_list += f"<li>{service}</li>"
        service_list += "</ul>"
    
    # Format the final message with HTML styling
    formatted_message = f"""
    <div style="font-family: Arial, sans-serif;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
            <span style="background-color: {badge_color}; color: white; padding: 5px 10px; border-radius: 4px; font-weight: bold;">
                {severity} - {message_type}
            </span>
            <span style="color: #666; font-size: 0.9em;">
                {timestamp}
            </span>
        </div>
        
        <div style="margin-bottom: 15px;">
            {message}
        </div>
        
        {f'<div style="margin-top: 15px;"><strong>Impacted Services:</strong>{service_list}</div>' if impacted_services else ''}
    </div>
    """
    
    return formatted_message

def get_severity_color(severity: str) -> str:
    """
    Get the appropriate color for the severity badge.
    
    Args:
        severity: The severity level (P0, P1, P2, P3)
        
    Returns:
        Color code for the severity
    """
    severity_colors = {
        "P0": "#d93025",  # Red
        "P1": "#e65100",  # Dark Orange
        "P2": "#f9a825",  # Amber
        "P3": "#4285f4",  # Blue
    }
    
    return severity_colors.get(severity, "#666666")  # Default gray if severity not found 